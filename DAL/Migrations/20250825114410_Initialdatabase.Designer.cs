// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825114410_Initialdatabase")]
    partial class Initialdatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MODEL.Entities.EnglishWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Level")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PartOfSpeech")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TextNormalized")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TextNormalized")
                        .IsUnique();

                    b.ToTable("EnglishWords", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.EnglishWordRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EnglishWordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedEnglishWordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RelatedEnglishWordId");

                    b.HasIndex("EnglishWordId", "RelatedEnglishWordId")
                        .IsUnique();

                    b.ToTable("EnglishWordRelations", null, t =>
                        {
                            t.HasCheckConstraint("CK_EnglishWordRelations_Order", "[EnglishWordId] < [RelatedEnglishWordId]");
                        });
                });

            modelBuilder.Entity("MODEL.Entities.ExampleSentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("EnglishText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EnglishWordId")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnglishWordId", "EnglishText")
                        .IsUnique();

                    b.ToTable("ExampleSentences", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.QuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EnglishWordId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuizRunId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuizRunId");

                    b.HasIndex("EnglishWordId", "CreatedAt");

                    b.ToTable("QuizAttempts", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.QuizRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CycleIndex")
                        .HasColumnType("int");

                    b.Property<string>("CycleOrderCsv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<int>("SeedCount")
                        .HasColumnType("int");

                    b.Property<string>("SeedWordIdsCsv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WordListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordListId", "StartedAt");

                    b.ToTable("QuizRuns", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.TurkishWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("PartOfSpeech")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TextNormalized")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TextNormalized")
                        .IsUnique();

                    b.ToTable("TurkishWords", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.WordList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("WordLists", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.WordListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EnglishWordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WordListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnglishWordId");

                    b.HasIndex("WordListId", "EnglishWordId")
                        .IsUnique();

                    b.ToTable("WordListItems", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.WordStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EnglishWordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastShownAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesShown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WordListId")
                        .HasColumnType("int");

                    b.Property<int>("WrongCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CorrectCount");

                    b.HasIndex("EnglishWordId");

                    b.HasIndex("LastShownAt");

                    b.HasIndex("TimesShown");

                    b.HasIndex("WrongCount");

                    b.HasIndex("WordListId", "EnglishWordId")
                        .IsUnique();

                    b.ToTable("WordStats", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.WordTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EnglishWordId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("TurkishWordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TurkishWordId");

                    b.HasIndex("EnglishWordId", "TurkishWordId")
                        .IsUnique();

                    b.ToTable("WordTranslations", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.EnglishWordRelation", b =>
                {
                    b.HasOne("MODEL.Entities.EnglishWord", "EnglishWord")
                        .WithMany("RelationsFrom")
                        .HasForeignKey("EnglishWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.EnglishWord", "RelatedEnglishWord")
                        .WithMany("RelationsTo")
                        .HasForeignKey("RelatedEnglishWordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EnglishWord");

                    b.Navigation("RelatedEnglishWord");
                });

            modelBuilder.Entity("MODEL.Entities.ExampleSentence", b =>
                {
                    b.HasOne("MODEL.Entities.EnglishWord", "EnglishWord")
                        .WithMany("Sentences")
                        .HasForeignKey("EnglishWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnglishWord");
                });

            modelBuilder.Entity("MODEL.Entities.QuizAttempt", b =>
                {
                    b.HasOne("MODEL.Entities.EnglishWord", "EnglishWord")
                        .WithMany()
                        .HasForeignKey("EnglishWordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.QuizRun", "QuizRun")
                        .WithMany()
                        .HasForeignKey("QuizRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnglishWord");

                    b.Navigation("QuizRun");
                });

            modelBuilder.Entity("MODEL.Entities.QuizRun", b =>
                {
                    b.HasOne("MODEL.Entities.WordList", "WordList")
                        .WithMany()
                        .HasForeignKey("WordListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WordList");
                });

            modelBuilder.Entity("MODEL.Entities.WordListItem", b =>
                {
                    b.HasOne("MODEL.Entities.EnglishWord", "EnglishWord")
                        .WithMany("WordListItems")
                        .HasForeignKey("EnglishWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.WordList", "WordList")
                        .WithMany("Items")
                        .HasForeignKey("WordListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnglishWord");

                    b.Navigation("WordList");
                });

            modelBuilder.Entity("MODEL.Entities.WordStat", b =>
                {
                    b.HasOne("MODEL.Entities.EnglishWord", "EnglishWord")
                        .WithMany()
                        .HasForeignKey("EnglishWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.WordList", "WordList")
                        .WithMany()
                        .HasForeignKey("WordListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnglishWord");

                    b.Navigation("WordList");
                });

            modelBuilder.Entity("MODEL.Entities.WordTranslation", b =>
                {
                    b.HasOne("MODEL.Entities.EnglishWord", "EnglishWord")
                        .WithMany("Translations")
                        .HasForeignKey("EnglishWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.TurkishWord", "TurkishWord")
                        .WithMany("Translations")
                        .HasForeignKey("TurkishWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnglishWord");

                    b.Navigation("TurkishWord");
                });

            modelBuilder.Entity("MODEL.Entities.EnglishWord", b =>
                {
                    b.Navigation("RelationsFrom");

                    b.Navigation("RelationsTo");

                    b.Navigation("Sentences");

                    b.Navigation("Translations");

                    b.Navigation("WordListItems");
                });

            modelBuilder.Entity("MODEL.Entities.TurkishWord", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("MODEL.Entities.WordList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
