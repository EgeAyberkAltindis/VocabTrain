@model List<BLL.DTO.ListWithCountDto>
@{
    ViewData["Title"] = "Listeler & Arama";
}

<div class="row g-4">
    <!-- Sidebar -->
    <div class="col-lg-3">
        @await Html.PartialAsync("_SidebarLists", Model)

        <div class="d-grid mt-3">
            <button id="createListBtn" type="button" class="btn btn-primary">
                <i class="bi bi-plus-lg"></i> Liste Yarat
            </button>
        </div>
    </div>

    <!-- Content -->
    <div class="col-lg-9">
        <div class="card shadow-sm border-0">
            <div class="card-header">
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input id="searchBox" type="text" class="form-control" placeholder="Tüm kelimelerde ara...">
                </div>
            </div>
            <div class="card-body p-0">
                <div id="results" class="p-3 text-body-secondary">Aramak için yazmaya başlayın…</div>
            </div>
        </div>
    </div>
</div>

<!-- Modal: Liste Yarat (aynı) -->
<div class="modal fade" id="createListModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <form id="createListForm" class="modal-content" method="post">
            @Html.AntiForgeryToken()
            <div class="modal-header">
                <h5 class="modal-title"><i class="bi bi-plus-lg"></i> Yeni Liste Oluştur</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>
            <div class="modal-body">
                <label class="form-label">Liste adı</label>
                <input type="text" id="listName" class="form-control" maxlength="150" required />
                <div id="createMsg" class="form-text text-danger mt-2"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="submit" class="btn btn-primary">Oluştur</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        let timer=null;
        const results = document.getElementById('results');
        const box = document.getElementById('searchBox');

        box.addEventListener('input', ()=> {
          clearTimeout(timer);
          const q = box.value.trim();
          if (!q) { results.innerHTML='<div class="p-3 text-body-secondary">Aramak için yazın…</div>'; return; }
          timer = setTimeout(()=> doSearch(q, null), 250);
        });

        async function doSearch(q, listId) {
          results.innerHTML = `<div class="alert alert-info m-3"><i class="bi bi-hourglass-split"></i> Aranıyor...</div>`;
          const url = `/Browse/Search?q=${encodeURIComponent(q)}${listId ? `&listId=${listId}`:''}`;
          const resp = await fetch(url, { credentials:'same-origin' });
          const data = await resp.json();
          renderResultsTable(data);
        }

        function renderResultsTable(items){
          if (!items || !items.length){
            results.innerHTML = `<div class="alert alert-warning m-3">Sonuç yok.</div>`;
            return;
          }
          let html = `
          <div class="table-responsive">
            <table class="table table-hover table-striped align-middle mb-0">
              <thead class="table-light">
                <tr><th>English</th><th>Türkçe</th><th>Eş anlam</th><th>Cümleler</th></tr>
              </thead>
              <tbody>`;
          items.forEach(it=>{
            const trs = (it.turkishMeanings||[]).join(', ');
            const syn = (it.synonyms||[]).join(', ');
            const sen = (it.exampleSentences||[]).map(s=>`<div class="text-body-secondary">${s}</div>`).join('');
            html += `<tr>
              <td class="fw-semibold">${it.englishText}</td>
              <td>${trs||'-'}</td>
              <td>${syn||'-'}</td>
              <td>${sen||'-'}</td>
            </tr>`;
          });
          html += `</tbody></table></div>`;
          results.innerHTML = html;
        }

        // Modal
        const modalEl = document.getElementById('createListModal');
        const modal = new bootstrap.Modal(modalEl);
        document.getElementById('createListBtn').onclick = ()=> { modal.show(); setTimeout(()=>document.getElementById('listName').focus(), 200); };

        document.getElementById('createListForm').addEventListener('submit', async (e)=>{
          e.preventDefault();
          const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
          const name = document.getElementById('listName').value.trim();
          const msg = document.getElementById('createMsg');
          msg.textContent = '';
          if (!name){ msg.textContent='Liste adı zorunlu.'; return; }

          const resp = await fetch(`/Lists/ensure?name=${encodeURIComponent(name)}`, {
            method:'POST',
            headers: { 'RequestVerificationToken': token },
            credentials:'same-origin'
          });

          if (resp.status === 409){
            const j = await resp.json();
            msg.textContent = j.message || 'Bu isimde liste zaten var, başka bir ad deneyin.';
            return;
          }
          if (!resp.ok){ msg.textContent='Oluşturulamadı.'; return; }

          location.reload();
        });
    </script>
}
